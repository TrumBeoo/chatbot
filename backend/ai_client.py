import requests
from typing import Optional
from config import Config

class AIClient:
    """L·ªõp giao ti·∫øp v·ªõi AI API"""
    
    def __init__(self):
        self.config = Config()
        self.headers = {
            "Authorization": f"Bearer {self.config.GROQ_API_KEY}",
            "Content-Type": "application/json"
        }
    
    def get_response(self, user_input: str, detected_lang: str) -> str:
        """
        G·ªçi API ƒë·ªÉ l·∫•y ph·∫£n h·ªìi t·ª´ AI
        
        Args:
            user_input: C√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
            detected_lang: Ng√¥n ng·ªØ ƒë∆∞·ª£c ph√°t hi·ªán
            
        Returns:
            str: Ph·∫£n h·ªìi t·ª´ AI
        """
        try:
            system_prompt = (self.config.SYSTEM_PROMPT_VI 
                           if detected_lang == 'vi' 
                           else self.config.SYSTEM_PROMPT_EN)
            
            data = {
                "model": self.config.AI_MODEL,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_input}
                ],
                "temperature": self.config.AI_TEMPERATURE,
                "max_tokens": self.config.AI_MAX_TOKENS
            }

            print("ü§ñ ƒêang g·ªçi AI...")
            response = requests.post(self.config.GROQ_API_URL, headers=self.headers, json=data)
            
            if response.status_code == 200:
                content = response.json()["choices"][0]["message"]["content"]
                return self._clean_content(content)
            else:
                return self._get_error_message(detected_lang)
                
        except Exception as e:
            print(f"L·ªói API: {e}")
            return self._get_busy_message(detected_lang)
    
    def _clean_content(self, content: str) -> str:
        """
        L√†m s·∫°ch n·ªôi dung ph·∫£n h·ªìi
        
        Args:
            content: N·ªôi dung c·∫ßn l√†m s·∫°ch
            
        Returns:
            str: N·ªôi dung ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch
        """
        # Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
        content = content.replace('*', '')
        
        # ƒê·∫£m b·∫£o c√¢u k·∫øt th√∫c b·∫±ng d·∫•u c√¢u ph√π h·ª£p
        if content and content[-1] not in ['.', '!', '?']:
            content += '.'
            
        return content
    
    def _get_error_message(self, lang: str) -> str:
        """Tr·∫£ v·ªÅ th√¥ng b√°o l·ªói theo ng√¥n ng·ªØ"""
        return ("Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau!" 
                if lang == 'vi' 
                else "Sorry, I'm having issues. Please try again later!")
    
    def _get_busy_message(self, lang: str) -> str:
        """Tr·∫£ v·ªÅ th√¥ng b√°o b·∫≠n theo ng√¥n ng·ªØ"""
        return ("T√¥i ƒëang b·∫≠n, vui l√≤ng th·ª≠ l·∫°i sau!" 
                if lang == 'vi' 
                else "I'm busy, please try again later!")