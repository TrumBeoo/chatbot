import time
from audio_manager import AudioManager
from speech_recognizer import SpeechRecognizer
from language_detector import LanguageDetector
from ai_client import AIClient
from config import Config

class TravelChatbot:
    """L·ªõp chatbot du l·ªãch ch√≠nh"""
    
    def __init__(self):
        self.config = Config()
        self.audio_manager = AudioManager()
        self.speech_recognizer = SpeechRecognizer()
        self.language_detector = LanguageDetector()
        self.ai_client = AIClient()
        
    def start(self):
        """Kh·ªüi ƒë·ªông chatbot"""
        print("üöÄ Chatbot du l·ªãch ƒë√£ s·∫µn s√†ng!")
        
        # Ch√†o h·ªèi ban ƒë·∫ßu
        self._welcome()
        
        # V√≤ng l·∫∑p ch√≠nh
        self._main_loop()
        
        print("üëã Chatbot ƒë√£ k·∫øt th√∫c!")
    
    def _welcome(self):
        """Ph√°t th√¥ng ƒëi·ªáp ch√†o h·ªèi"""
        print(f"Chatbot: {self.config.WELCOME_MSG_VI}")
        self.audio_manager.text_to_speech(self.config.WELCOME_MSG_VI, 'vi')
        
        print(f"Chatbot: {self.config.WELCOME_MSG_EN}")
        self.audio_manager.text_to_speech(self.config.WELCOME_MSG_EN, 'en')
    
    def _main_loop(self):
        """V√≤ng l·∫∑p ch√≠nh c·ªßa chatbot"""
        while True:
            try:
                # Ch·ªù cho ƒë·∫øn khi t·∫•t c·∫£ √¢m thanh ƒë√£ ph√°t xong
                self.audio_manager.wait_for_audio_completion()
                
                # Th√™m delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o √¢m thanh ƒë√£ k·∫øt th√∫c ho√†n to√†n
                time.sleep(self.config.COMPLETION_DELAY)
                
                # L·∫Øng nghe ng∆∞·ªùi d√πng
                user_text, detected_lang = self.speech_recognizer.listen_for_speech()
                
                if not user_text:
                    continue
                
                # X√°c nh·∫≠n ng√¥n ng·ªØ b·∫±ng ph√¢n t√≠ch vƒÉn b·∫£n
                text_lang = self.language_detector.detect_language(user_text)
                if text_lang != detected_lang:
                    detected_lang = text_lang
                    print(f"üîÑ ƒê√£ chuy·ªÉn ng√¥n ng·ªØ th√†nh: {detected_lang}")
                
                # Ki·ªÉm tra l·ªánh k·∫øt th√∫c
                if self.language_detector.is_exit_command(user_text, self.config.EXIT_COMMANDS):
                    self._farewell(detected_lang)
                    break
                
                # X·ª≠ l√Ω c√¢u h·ªèi
                self._process_question(user_text, detected_lang)
                
            except KeyboardInterrupt:
                print("\n ƒêang tho√°t...")
                break
            except Exception as e:
                print(f"L·ªói: {e}")
                # N·∫øu c√≥ l·ªói, ƒë·∫£m b·∫£o event ƒë∆∞·ª£c set ƒë·ªÉ kh√¥ng b·ªã treo
                self.audio_manager.audio_finished_event.set()
                continue
    
    def _process_question(self, user_text: str, detected_lang: str):
        """
        X·ª≠ l√Ω c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
        
        Args:
            user_text: C√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
            detected_lang: Ng√¥n ng·ªØ ƒë∆∞·ª£c ph√°t hi·ªán
        """
        # L·∫•y ph·∫£n h·ªìi t·ª´ AI
        ai_response = self.ai_client.get_response(user_text, detected_lang)
        print(f"ü§ñ Chatbot: {ai_response}")
        
        # Ph√°t √¢m thanh
        self.audio_manager.text_to_speech(ai_response, detected_lang)
    
    def _farewell(self, detected_lang: str):
        """
        Ph√°t th√¥ng ƒëi·ªáp t·∫°m bi·ªát
        
        Args:
            detected_lang: Ng√¥n ng·ªØ ƒë·ªÉ ph√°t th√¥ng ƒëi·ªáp
        """
        farewell = (self.config.FAREWELL_MSG_VI 
                   if detected_lang == 'vi' 
                   else self.config.FAREWELL_MSG_EN)
        
        print(f"üëã Chatbot: {farewell}")
        self.audio_manager.text_to_speech(farewell, detected_lang)
        
        # Ch·ªù ph√°t xong √¢m thanh cu·ªëi c√πng
        self.audio_manager.wait_for_audio_completion()

# H√†m ch·∫°y chatbot (t∆∞∆°ng th√≠ch v·ªõi code c≈©)
def main():
    """H√†m main ƒë·ªÉ ch·∫°y chatbot"""
    chatbot = TravelChatbot()
    chatbot.start()

if __name__ == "__main__":
    main()