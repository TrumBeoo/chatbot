from flask import Flask, request, jsonify
from flask_cors import CORS
import speech_recognition
import tempfile
import os
from dotenv import load_dotenv
import langdetect
from langdetect import detect

load_dotenv()

app = Flask(__name__)
CORS(app)

# Kh·ªüi t·∫°o speech recognition (gi·ªØ nguy√™n t·ª´ noi.py)
robot_ear = speech_recognition.Recognizer()
robot_ear.energy_threshold = 4000
robot_ear.dynamic_energy_threshold = True

def detect_language(text):
    """Nh·∫≠n di·ªán ng√¥n ng·ªØ c·ªßa vƒÉn b·∫£n (gi·ªØ nguy√™n t·ª´ noi.py)"""
    try:
        lang = detect(text)
        return 'vi' if lang == 'vi' else 'en'
    except:
        vietnamese_chars = '√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë'
        if any(char in text.lower() for char in vietnamese_chars):
            return 'vi'
        return 'en'

@app.route('/voice-to-text', methods=['POST'])
def voice_to_text():
    """
    API endpoint ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi·ªçng n√≥i th√†nh vƒÉn b·∫£n
    S·ª≠ d·ª•ng m√¥ h√¨nh t·ª´ noi.py
    """
    try:
        # Ki·ªÉm tra file audio trong request
        if 'audio' not in request.files:
            return jsonify({
                "status": "error",
                "message": "Kh√¥ng t√¨m th·∫•y file audio"
            }), 400
        
        audio_file = request.files['audio']
        language_hint = request.form.get('language', 'vi')  # G·ª£i √Ω ng√¥n ng·ªØ
        
        print(f"üé§ Nh·∫≠n file audio, g·ª£i √Ω ng√¥n ng·ªØ: {language_hint}")
        
        # L∆∞u file t·∫°m th·ªùi
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp_file:
            audio_file.save(tmp_file.name)
            
            try:
                # S·ª≠ d·ª•ng speech recognition t·ª´ noi.py
                with speech_recognition.AudioFile(tmp_file.name) as source:
                    audio_data = robot_ear.record(source)
                    
                    # Th·ª≠ nh·∫≠n di·ªán theo g·ª£i √Ω ng√¥n ng·ªØ tr∆∞·ªõc
                    recognized_text = ""
                    detected_lang = language_hint
                    
                    try:
                        if language_hint == 'vi':
                            recognized_text = robot_ear.recognize_google(audio_data, language="vi-VN")
                            detected_lang = 'vi'
                            print(f"üáªüá≥ Nh·∫≠n di·ªán ti·∫øng Vi·ªát: {recognized_text}")
                        else:
                            recognized_text = robot_ear.recognize_google(audio_data, language="en-US")
                            detected_lang = 'en'
                            print(f"üá∫üá∏ Nh·∫≠n di·ªán ti·∫øng Anh: {recognized_text}")
                    except:
                        # N·∫øu kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c, th·ª≠ ng√¥n ng·ªØ kh√°c
                        try:
                            if language_hint == 'vi':
                                recognized_text = robot_ear.recognize_google(audio_data, language="en-US")
                                detected_lang = 'en'
                                print(f"üîÑ Chuy·ªÉn sang ti·∫øng Anh: {recognized_text}")
                            else:
                                recognized_text = robot_ear.recognize_google(audio_data, language="vi-VN")
                                detected_lang = 'vi'
                                print(f"üîÑ Chuy·ªÉn sang ti·∫øng Vi·ªát: {recognized_text}")
                        except:
                            return jsonify({
                                "status": "error",
                                "message": "Kh√¥ng th·ªÉ nh·∫≠n di·ªán gi·ªçng n√≥i"
                            }), 400
                    
                    # X√°c nh·∫≠n ng√¥n ng·ªØ b·∫±ng ph√¢n t√≠ch vƒÉn b·∫£n (gi·ªØ nguy√™n t·ª´ noi.py)
                    if recognized_text:
                        text_lang = detect_language(recognized_text)
                        if text_lang != detected_lang:
                            detected_lang = text_lang
                            print(f"üîÑ ƒê√£ chuy·ªÉn ng√¥n ng·ªØ th√†nh: {detected_lang}")
                    
                    # X√≥a file t·∫°m
                    os.unlink(tmp_file.name)
                    
                    return jsonify({
                        "status": "success",
                        "text": recognized_text,
                        "language": detected_lang
                    })
                    
            except Exception as e:
                # X√≥a file t·∫°m n·∫øu c√≥ l·ªói
                if os.path.exists(tmp_file.name):
                    os.unlink(tmp_file.name)
                
                print(f"‚ùå L·ªói nh·∫≠n di·ªán: {str(e)}")
                return jsonify({
                    "status": "error",
                    "message": f"L·ªói nh·∫≠n di·ªán gi·ªçng n√≥i: {str(e)}"
                }), 500
                
    except Exception as e:
        print(f"‚ùå L·ªói x·ª≠ l√Ω: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"L·ªói x·ª≠ l√Ω request: {str(e)}"
        }), 500

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({
        "status": "healthy",
        "message": "Voice-to-Text API is running"
    })

if __name__ == '__main__':
    print("üöÄ Voice-to-Text API ƒë√£ s·∫µn s√†ng!")
    app.run(host='0.0.0.0', port=5002, debug=True)