from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import speech_recognition as sr
import edge_tts
import asyncio
import os
import requests
from langdetect import detect
import tempfile
import io

app = Flask(__name__)
CORS(app)

url = "https://api.groq.com/openai/v1/chat/completions"
headers = {
    "Authorization": "Bearer your_api_key",  # Thay b·∫±ng key th·∫≠t
    "Content-Type": "application/json"
}

# C·∫•u h√¨nh gi·ªçng n√≥i cho Edge TTS
EDGE_VOICES = {
    'vi': 'vi-VN-HoaiMyNeural',  # Gi·ªçng n·ªØ ti·∫øng Vi·ªát
    'en': 'en-US-AriaNeural'     # Gi·ªçng n·ªØ ti·∫øng Anh
}

def detect_language(text):
    """Nh·∫≠n di·ªán ng√¥n ng·ªØ c·ªßa vƒÉn b·∫£n"""
    try:
        lang = detect(text)
        return 'vi' if lang == 'vi' else 'en'
    except:
        vietnamese_chars = '√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë'
        if any(char in text.lower() for char in vietnamese_chars):
            return 'vi'
        return 'en'

def get_ai_response(user_input, detected_lang):
    """G·ªçi API ƒë·ªÉ l·∫•y ph·∫£n h·ªìi t·ª´ AI"""
    try:
        if detected_lang == 'vi':
            system_prompt = """B·∫°n l√† m·ªôt tr·ª£ l√Ω du l·ªãch th√¥ng minh. Khi ƒë∆∞·ª£c h·ªèi b·∫±ng ti·∫øng Vi·ªát, b·∫°n s·∫Ω tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát. 
        B·∫°n ch·ªâ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn du l·ªãch nh∆∞: ƒë·ªãa ƒëi·ªÉm, l·ªãch tr√¨nh, kh√°ch s·∫°n, ·∫©m th·ª±c, vƒÉn h√≥a, giao th√¥ng, 
        th·ªùi ti·∫øt, chi ph√≠ du l·ªãch, v.v. Ph·∫°m vi tr·∫£ l·ªùi c·ªßa b·∫°n ch·ªâ gi·ªõi h·∫°n trong t·ªânh Qu·∫£ng Ninh. 
        N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn du l·ªãch ho·∫∑c n·∫±m ngo√†i t·ªânh Qu·∫£ng Ninh, h√£y l·ªãch s·ª± t·ª´ ch·ªëi v√† g·ª£i √Ω ng∆∞·ªùi d√πng h·ªèi v·ªÅ du l·ªãch t·∫°i Qu·∫£ng Ninh."""
        else:
            system_prompt = """You are a smart travel assistant. When asked in English, you will respond in English. 
        You only answer questions related to travel such as: destinations, itineraries, hotels, food, culture, transportation, 
        weather, travel costs, etc. Your answers are strictly limited to the Quang Ninh province. 
        If the question is not travel-related or is outside Quang Ninh, politely decline and suggest asking about travel in Quang Ninh."""

        data = {
            "model": "llama3-70b-8192",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_input}
            ],
            "temperature": 0.7,
            "max_tokens": 300
        }

        print("ü§ñ ƒêang g·ªçi AI...")
        response = requests.post(url, headers=headers, json=data)
        if response.status_code == 200:
            content = response.json()["choices"][0]["message"]["content"]
            content = content.replace('*', '')  # Lo·∫°i b·ªè d·∫•u sao
            if content and not content[-1] in ['.', '!', '?']:
                content += '.'
            return content, detected_lang
        else:
            error_msg = "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau!" if detected_lang == 'vi' else "Sorry, I'm having issues. Please try again later!"
            return error_msg, detected_lang
            
    except Exception as e:
        print(f"L·ªói API: {e}")
        error_msg = "T√¥i ƒëang b·∫≠n, vui l√≤ng th·ª≠ l·∫°i sau!" if detected_lang == 'vi' else "I'm busy, please try again later!"
        return error_msg, detected_lang

async def text_to_speech(text, lang='vi'):
    """Chuy·ªÉn text th√†nh file √¢m thanh"""
    try:
        voice = EDGE_VOICES.get(lang, EDGE_VOICES['vi'])
        
        with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as tmp_file:
            filename = tmp_file.name
            
        communicate = edge_tts.Communicate(text, voice)
        await communicate.save(filename)
        
        return filename
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o √¢m thanh: {e}")
        return None

@app.route('/chat-voice', methods=['POST'])
def chat_voice():
    """X·ª≠ l√Ω voice chat: nh·∫≠n audio file, tr·∫£ v·ªÅ audio response"""
    if 'audio' not in request.files:
        return jsonify({"error": "No audio file provided"}), 400
        
    audio_file = request.files['audio']
    
    # Kh·ªüi t·∫°o recognizer
    recognizer = sr.Recognizer()
    recognizer.energy_threshold = 4000
    recognizer.dynamic_energy_threshold = True
    
    try:
        # ƒê·ªçc audio t·ª´ file
        with sr.AudioFile(audio_file) as source:
            print("üé§ ƒêang nh·∫≠n d·∫°ng gi·ªçng n√≥i...")
            audio_data = recognizer.record(source)
            
        # Th·ª≠ nh·∫≠n d·∫°ng ti·∫øng Vi·ªát tr∆∞·ªõc
        try:
            text = recognizer.recognize_google(audio_data, language="vi-VN")
            lang = 'vi'
            print(f"üáªüá≥ Nh·∫≠n di·ªán ti·∫øng Vi·ªát: {text}")
        except:
            try:
                # N·∫øu kh√¥ng ƒë∆∞·ª£c, th·ª≠ ti·∫øng Anh
                text = recognizer.recognize_google(audio_data, language="en-US")
                lang = 'en'
                print(f"üá∫üá∏ Nh·∫≠n di·ªán ti·∫øng Anh: {text}")
            except sr.UnknownValueError:
                return jsonify({"error": "Kh√¥ng th·ªÉ nh·∫≠n d·∫°ng gi·ªçng n√≥i"}), 400
            except sr.RequestError:
                return jsonify({"error": "L·ªói k·∫øt n·ªëi v·ªõi Google Speech Recognition"}), 500
        
        # X√°c nh·∫≠n ng√¥n ng·ªØ b·∫±ng ph√¢n t√≠ch vƒÉn b·∫£n
        if text:
            text_lang = detect_language(text)
            if text_lang != lang:
                lang = text_lang
                print(f"üîÑ ƒê√£ chuy·ªÉn ng√¥n ng·ªØ th√†nh: {lang}")
        
        # L·∫•y ph·∫£n h·ªìi t·ª´ AI
        response_text, detected_lang = get_ai_response(text, lang)
        print(f"ü§ñ Ph·∫£n h·ªìi AI: {response_text}")
        
        # Chuy·ªÉn text th√†nh speech
        audio_file = asyncio.run(text_to_speech(response_text, detected_lang))
        
        if audio_file and os.path.exists(audio_file):
            try:
                return send_file(
                    audio_file,
                    mimetype='audio/mpeg',
                    as_attachment=True,
                    download_name='response.mp3'
                )
            finally:
                # Cleanup: x√≥a file t·∫°m sau khi g·ª≠i
                os.remove(audio_file)
        else:
            return jsonify({"error": "Kh√¥ng th·ªÉ t·∫°o √¢m thanh"}), 500
            
    except Exception as e:
        print(f"L·ªói: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/speak', methods=['POST'])
def speak():
    """Chuy·ªÉn text th√†nh speech"""
    try:
        data = request.get_json()
        text = data.get('text', '')
        lang = data.get('lang', 'vi')
        
        if not text:
            return jsonify({"error": "Missing text parameter"}), 400
            
        print(f"üéµ ƒêang t·∫°o √¢m thanh cho: {text}")
        
        audio_file = asyncio.run(text_to_speech(text, lang))
        
        if audio_file and os.path.exists(audio_file):
            try:
                return send_file(
                    audio_file,
                    mimetype='audio/mpeg',
                    as_attachment=True,
                    download_name='speech.mp3'
                )
            finally:
                # Cleanup: x√≥a file t·∫°m sau khi g·ª≠i
                os.remove(audio_file)
        else:
            return jsonify({"error": "Kh√¥ng th·ªÉ t·∫°o √¢m thanh"}), 500
            
    except Exception as e:
        print(f"L·ªói: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/')
def index():
    return "Voice Chat API is running!"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
