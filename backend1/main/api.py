from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import speech_recognition
import edge_tts
import asyncio
import os
import requests
import langdetect
from langdetect import detect
import tempfile
import logging
from werkzeug.utils import secure_filename
import uuid
import io
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
CORS(app)

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# C·∫•u h√¨nh Groq API
GROQ_API_URL = "https://api.groq.com/openai/v1/chat/completions"
GROQ_API_KEY = "your_api_key"  # Thay b·∫±ng key th·∫≠t

headers = {
    "Authorization": f"Bearer {GROQ_API_KEY}",
    "Content-Type": "application/json"
}

# C·∫•u h√¨nh gi·ªçng n√≥i cho Edge TTS
EDGE_VOICES = {
    'vi': 'vi-VN-HoaiMyNeural',  # Gi·ªçng n·ªØ ti·∫øng Vi·ªát
    'en': 'en-US-AriaNeural'     # Gi·ªçng n·ªØ ti·∫øng Anh
}

# Kh·ªüi t·∫°o speech recognition
recognizer = speech_recognition.Recognizer()
recognizer.energy_threshold = 4000  # TƒÉng ng∆∞·ª°ng nƒÉng l∆∞·ª£ng ƒë·ªÉ tr√°nh ti·∫øng ·ªìn
recognizer.dynamic_energy_threshold = True

def detect_language(text):
    """Nh·∫≠n di·ªán ng√¥n ng·ªØ c·ªßa vƒÉn b·∫£n"""
    try:
        lang = detect(text)
        return 'vi' if lang == 'vi' else 'en'
    except:
        vietnamese_chars = '√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë'
        if any(char in text.lower() for char in vietnamese_chars):
            return 'vi'
        return 'en'

def get_ai_response(user_input, detected_lang):
    """G·ªçi API ƒë·ªÉ l·∫•y ph·∫£n h·ªìi t·ª´ AI"""
    try:
        if detected_lang == 'vi':
            system_prompt = """B·∫°n l√† m·ªôt tr·ª£ l√Ω du l·ªãch th√¥ng minh. Khi ƒë∆∞·ª£c h·ªèi b·∫±ng ti·∫øng Vi·ªát, b·∫°n s·∫Ω tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát. 
            B·∫°n ch·ªâ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn du l·ªãch nh∆∞: ƒë·ªãa ƒëi·ªÉm, l·ªãch tr√¨nh, kh√°ch s·∫°n, ·∫©m th·ª±c, vƒÉn h√≥a, giao th√¥ng, 
            th·ªùi ti·∫øt, chi ph√≠ du l·ªãch, v.v. Ph·∫°m vi tr·∫£ l·ªùi c·ªßa b·∫°n ch·ªâ gi·ªõi h·∫°n trong t·ªânh Qu·∫£ng Ninh. 
            N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn du l·ªãch ho·∫∑c n·∫±m ngo√†i t·ªânh Qu·∫£ng Ninh, h√£y l·ªãch s·ª± t·ª´ ch·ªëi v√† g·ª£i √Ω ng∆∞·ªùi d√πng h·ªèi v·ªÅ du l·ªãch t·∫°i Qu·∫£ng Ninh."""
        else:
            system_prompt = """You are a smart travel assistant. When asked in English, you will respond in English. 
            You only answer questions related to travel such as: destinations, itineraries, hotels, food, culture, transportation, 
            weather, travel costs, etc. Your answers are strictly limited to the Quang Ninh province. 
            If the question is not travel-related or is outside Quang Ninh, politely decline and suggest asking about travel in Quang Ninh."""

        data = {
            "model": "llama3-70b-8192",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_input}
            ],
            "temperature": 0.7,
            "max_tokens": 300
        }

        logger.info(f"ü§ñ ƒêang g·ªçi AI cho input: {user_input}")
        response = requests.post(GROQ_API_URL, headers=headers, json=data)
        
        if response.status_code == 200:
            content = response.json()["choices"][0]["message"]["content"]
            
            # L√†m s·∫°ch n·ªôi dung - lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát v√† d·∫•u c√¢u th·ª´a
            content = content.replace('*', '')  # Lo·∫°i b·ªè d·∫•u sao
            
            # ƒê·∫£m b·∫£o c√¢u k·∫øt th√∫c b·∫±ng d·∫•u c√¢u ph√π h·ª£p
            if content and not content[-1] in ['.', '!', '?']:
                content += '.'
                
            return content
        else:
            logger.error(f"API Error: {response.status_code} - {response.text}")
            return "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau!" if detected_lang == 'vi' else "Sorry, I'm having issues. Please try again later!"
            
    except Exception as e:
        logger.error(f"L·ªói API: {e}")
        return "T√¥i ƒëang b·∫≠n, vui l√≤ng th·ª≠ l·∫°i sau!" if detected_lang == 'vi' else "I'm busy, please try again later!"

async def text_to_speech_async(text, lang='vi'):
    """Chuy·ªÉn text th√†nh gi·ªçng n√≥i s·ª≠ d·ª•ng Edge TTS"""
    try:
        logger.info(f"üéµ ƒêang t·∫°o √¢m thanh cho: {text[:50]}...")
        
        # T·∫°o file t·∫°m th·ªùi
        temp_file = tempfile.NamedTemporaryFile(suffix='.mp3', delete=False)
        filename = temp_file.name
        temp_file.close()
        
        # S·ª≠ d·ª•ng Edge TTS
        voice = EDGE_VOICES.get(lang, EDGE_VOICES['vi'])
        communicate = edge_tts.Communicate(text, voice)
        await communicate.save(filename)
        
        logger.info(f"üìù √Çm thanh ƒë√£ ƒë∆∞·ª£c t·∫°o: {filename}")
        return filename
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói t·∫°o √¢m thanh: {e}")
        return None

def text_to_speech(text, lang='vi'):
    """Wrapper synchronous cho text_to_speech_async"""
    return asyncio.run(text_to_speech_async(text, lang))

@app.route('/chat', methods=['POST'])
def chat():
    """Endpoint cho chat text"""
    try:
        # L·∫•y tin nh·∫Øn t·ª´ request
        request_data = request.get_json()
        user_message = request_data.get('message', '')
        
        if not user_message:
            return jsonify({'error': 'Kh√¥ng c√≥ tin nh·∫Øn'}), 400
        
        logger.info(f"üì® Nh·∫≠n tin nh·∫Øn text: {user_message}")
        
        # Nh·∫≠n di·ªán ng√¥n ng·ªØ
        detected_lang = detect_language(user_message)
        logger.info(f"üî§ Ng√¥n ng·ªØ nh·∫≠n di·ªán: {detected_lang}")
        
        # L·∫•y ph·∫£n h·ªìi t·ª´ AI
        ai_response = get_ai_response(user_message, detected_lang)
        
        return jsonify({
            "status": "success",
            "response": ai_response,
            "language": detected_lang
        })
        
    except Exception as e:
        logger.error(f"Error in chat: {e}")
        return jsonify({'error': 'L·ªói server'}), 500

@app.route('/chat-voice', methods=['POST'])
def chat_voice():
    """Endpoint cho chat voice"""
    try:
        # Ki·ªÉm tra file audio
        if 'audio' not in request.files:
            return jsonify({'error': 'Kh√¥ng c√≥ file audio'}), 400
        
        audio_file = request.files['audio']
        if audio_file.filename == '':
            return jsonify({'error': 'Kh√¥ng c√≥ file ƒë∆∞·ª£c ch·ªçn'}), 400
        
        logger.info("üé§ Nh·∫≠n file audio t·ª´ client")
        
        # L∆∞u file audio t·∫°m th·ªùi
        temp_audio = tempfile.NamedTemporaryFile(suffix='.wav', delete=False)
        audio_file.save(temp_audio.name)
        
        # Nh·∫≠n di·ªán gi·ªçng n√≥i
        user_text = ""
        detected_lang = 'vi'
        
        try:
            with speech_recognition.AudioFile(temp_audio.name) as source:
                audio_data = recognizer.record(source)
            
            # Th·ª≠ nh·∫≠n di·ªán ti·∫øng Vi·ªát tr∆∞·ªõc
            try:
                user_text = recognizer.recognize_google(audio_data, language="vi-VN")
                detected_lang = 'vi'
                logger.info(f"üáªüá≥ Nh·∫≠n di·ªán ti·∫øng Vi·ªát: {user_text}")
            except:
                try:
                    # N·∫øu kh√¥ng ƒë∆∞·ª£c, th·ª≠ ti·∫øng Anh
                    user_text = recognizer.recognize_google(audio_data, language="en-US")
                    detected_lang = 'en'
                    logger.info(f"üá∫üá∏ Nh·∫≠n di·ªán ti·∫øng Anh: {user_text}")
                except:
                    logger.error("‚ùå Kh√¥ng th·ªÉ nh·∫≠n di·ªán gi·ªçng n√≥i")
                    # Cleanup v√† tr·∫£ l·ªói
                    os.unlink(temp_audio.name)
                    return jsonify({'error': 'Kh√¥ng th·ªÉ nh·∫≠n di·ªán gi·ªçng n√≥i'}), 400
                
        except Exception as e:
            logger.error(f"L·ªói nh·∫≠n di·ªán gi·ªçng n√≥i: {e}")
            os.unlink(temp_audio.name)
            return jsonify({'error': 'L·ªói x·ª≠ l√Ω file audio'}), 500
        
        # Cleanup file audio t·∫°m th·ªùi
        os.unlink(temp_audio.name)
        
        if not user_text:
            return jsonify({'error': 'Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c vƒÉn b·∫£n'}), 400
        
        # X√°c nh·∫≠n ng√¥n ng·ªØ b·∫±ng ph√¢n t√≠ch vƒÉn b·∫£n
        if user_text:
            text_lang = detect_language(user_text)
            if text_lang != detected_lang:
                detected_lang = text_lang
                logger.info(f"üîÑ ƒê√£ chuy·ªÉn ng√¥n ng·ªØ th√†nh: {detected_lang}")
        
        # Ki·ªÉm tra l·ªánh k·∫øt th√∫c
        exit_commands = ['bye', 'goodbye', 't·∫°m bi·ªát', 'ch√†o t·∫°m bi·ªát', 'k·∫øt th√∫c', 'stop']
        if any(cmd in user_text.lower() for cmd in exit_commands):
            farewell = "Ch√†o t·∫°m bi·ªát! Ch√∫c b·∫°n c√≥ chuy·∫øn du l·ªãch vui v·∫ª!" if detected_lang == 'vi' else "Goodbye! Have a wonderful trip!"
            logger.info(f"üëã L·ªánh k·∫øt th√∫c ƒë∆∞·ª£c nh·∫≠n di·ªán: {user_text}")
            
            return jsonify({
                'response': farewell,
                'user_text': user_text,
                'language': detected_lang,
                'is_farewell': True
            })
        
        # L·∫•y ph·∫£n h·ªìi t·ª´ AI
        ai_response = get_ai_response(user_text, detected_lang)
        
        return jsonify({
            'response': ai_response,
            'user_text': user_text,
            'language': detected_lang,
            'is_farewell': False
        })
        
    except Exception as e:
        logger.error(f"Error in chat_voice: {e}")
        return jsonify({'error': 'L·ªói server'}), 500

@app.route('/text-to-speech', methods=['POST'])
def generate_speech():
    """Endpoint ƒë·ªÉ t·∫°o file √¢m thanh t·ª´ text"""
    try:
        data = request.get_json()
        text = data.get('text', '')
        lang = data.get('language', 'vi')
        
        if not text:
            return jsonify({'error': 'Kh√¥ng c√≥ vƒÉn b·∫£n'}), 400
        
        logger.info(f"üîä Y√™u c·∫ßu t·∫°o √¢m thanh: {text[:50]}... (lang: {lang})")
        
        # T·∫°o file √¢m thanh
        audio_file = text_to_speech(text, lang)
        
        if audio_file and os.path.exists(audio_file):
            # T·∫°o unique filename ƒë·ªÉ tr√°nh conflict
            unique_filename = f"speech_{uuid.uuid4().hex}.mp3"
            
            def cleanup_file():
                """Cleanup file sau khi g·ª≠i"""
                try:
                    if os.path.exists(audio_file):
                        os.unlink(audio_file)
                        logger.info(f"üóëÔ∏è ƒê√£ x√≥a file t·∫°m th·ªùi: {audio_file}")
                except Exception as e:
                    logger.error(f"L·ªói cleanup file: {e}")
            
            # Tr·∫£ file v√† cleanup sau khi g·ª≠i
            try:
                response = send_file(
                    audio_file,
                    as_attachment=True,
                    download_name=unique_filename,
                    mimetype='audio/mpeg'
                )
                
                # Cleanup file sau khi response ƒë∆∞·ª£c g·ª≠i
                @response.call_on_close
                def cleanup():
                    cleanup_file()
                
                return response
                
            except Exception as e:
                logger.error(f"L·ªói g·ª≠i file: {e}")
                cleanup_file()
                return jsonify({'error': 'L·ªói g·ª≠i file √¢m thanh'}), 500
        else:
            return jsonify({'error': 'Kh√¥ng th·ªÉ t·∫°o file √¢m thanh'}), 500
            
    except Exception as e:
        logger.error(f"Error in generate_speech: {e}")
        return jsonify({'error': 'L·ªói server'}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'message': 'API ƒëang ho·∫°t ƒë·ªông',
        'endpoints': {
            'chat': 'POST /chat - Chat b·∫±ng text',
            'chat_voice': 'POST /chat-voice - Chat b·∫±ng voice',
            'text_to_speech': 'POST /text-to-speech - T·∫°o file √¢m thanh',
            'health': 'GET /health - Health check'
        }
    })

if __name__ == '__main__':
    print("üöÄ Flask API Server ƒëang kh·ªüi ƒë·ªông...")
    print("üìç C√°c endpoint c√≥ s·∫µn:")
    print("  - POST /chat: Chat b·∫±ng text")
    print("  - POST /chat-voice: Chat b·∫±ng voice (upload audio file)")
    print("  - POST /text-to-speech: T·∫°o file √¢m thanh t·ª´ text")
    print("  - GET /health: Health check")
    print("üéØ Server s·∫Ω ch·∫°y t·∫°i: http://localhost:5000")
    print("üí° Nh·ªõ thay ƒë·ªïi GROQ_API_KEY trong code!")
    
    app.run(host='0.0.0.0', port=5000, debug=True)