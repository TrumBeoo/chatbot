import time
from services.audio_manager import AudioManager
from services.speech_service import SpeechService
from services.ai_service import AIService
from utils.language_detector import LanguageDetector

class TravelChatbot:
    def __init__(self):
        self.audio_manager = AudioManager()
        self.speech_service = SpeechService()
        self.ai_service = AIService()
        self.language_detector = LanguageDetector()
    
    def start(self):
        """Kh·ªüi ƒë·ªông chatbot"""
        print("üöÄ Chatbot du l·ªãch ƒë√£ s·∫µn s√†ng!")
        
        # Ch√†o h·ªèi ban ƒë·∫ßu
        self._welcome()
        
        # V√≤ng l·∫∑p ch√≠nh
        while True:
            try:
                # Ch·ªù cho ƒë·∫øn khi t·∫•t c·∫£ √¢m thanh ƒë√£ ph√°t xong
                self.audio_manager.wait_for_audio_completion()
                time.sleep(0.3)
                
                # L·∫Øng nghe v√† nh·∫≠n di·ªán
                text, detected_lang = self.speech_service.listen_and_recognize()
                
                if not text:
                    continue
                
                # X√°c nh·∫≠n ng√¥n ng·ªØ b·∫±ng ph√¢n t√≠ch vƒÉn b·∫£n
                if text:
                    text_lang = self.language_detector.detect_language(text)
                    if text_lang != detected_lang:
                        detected_lang = text_lang
                        print(f"üîÑ ƒê√£ chuy·ªÉn ng√¥n ng·ªØ th√†nh: {detected_lang}")
                
                # Ki·ªÉm tra l·ªánh k·∫øt th√∫c
                if self.language_detector.is_exit_command(text):
                    self._farewell(detected_lang)
                    break
                
                # L·∫•y ph·∫£n h·ªìi t·ª´ AI
                response = self.ai_service.get_response(text, detected_lang)
                print(f"ü§ñ Chatbot: {response}")
                
                # Ph√°t √¢m thanh
                self.audio_manager.text_to_speech(response, detected_lang)
                
            except KeyboardInterrupt:
                print("\n ƒêang tho√°t...")
                break
            except Exception as e:
                print(f"L·ªói: {e}")
                self.audio_manager.audio_finished_event.set()
                continue

        print("üëã Chatbot ƒë√£ k·∫øt th√∫c!")
    
    def _welcome(self):
        """Tin nh·∫Øn ch√†o h·ªèi"""
        welcome_msg_vi = "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω du l·ªãch c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ ƒë·ªãa ƒëi·ªÉm, l·ªãch tr√¨nh, kh√°ch s·∫°n, ·∫©m th·ª±c v√† nhi·ªÅu th√¥ng tin du l·ªãch kh√°c!"
        welcome_msg_en = "Hello! I am your travel assistant. You can ask me about destinations, itineraries, hotels, food, and more travel information!"
        
        print(f"Chatbot: {welcome_msg_vi}")
        self.audio_manager.text_to_speech(welcome_msg_vi, 'vi')
        
        print(f"Chatbot: {welcome_msg_en}")
        self.audio_manager.text_to_speech(welcome_msg_en, 'en')
    
    def _farewell(self, lang):
        """Tin nh·∫Øn t·∫°m bi·ªát"""
        farewell = ("Ch√†o t·∫°m bi·ªát! Ch√∫c b·∫°n c√≥ chuy·∫øn du l·ªãch vui v·∫ª!" 
                   if lang == 'vi' 
                   else "Goodbye! Have a wonderful trip!")
        print(f"üëã Chatbot: {farewell}")
        self.audio_manager.text_to_speech(farewell, lang)
        self.audio_manager.wait_for_audio_completion()

if __name__ == "__main__":
    chatbot = TravelChatbot()
    chatbot.start()